   
# ConfigurationManagement.Master.Azure.Pipeline.yml
# YAML schema reference https://aka.ms/yaml
# ConfigurationManagement.Master.Azure.Pipeline.yml
# YAML schema reference https://aka.ms/yaml


pool:
  name: LoanOfficerPointOfSaleDefault
  demands:
  - build
  - npm


variables:
  - group: Azure DevOps


steps:
- powershell: |
   $ErrorActionPreference = 'SilentlyContinue'
   
   echo "`n`r==========[ $env:Build_DefinitionName : $env:System_PhaseDisplayName : $env:System_PhaseName : $env:System_TaskDisplayName ]==========`r"
   
   echo "`n`r==========[ Artifact ]==========`r"
   
   echo "`r`$env:Build_DefinitionName.`$env:Build_BuildId:`r$env:Build_DefinitionName.$env:Build_BuildId"
   
   echo "`n`r==========[ Sources ]==========`r"
   
   echo "`r`$env:Build_SourcesDirectory:`r$env:Build_SourcesDirectory"
   echo "`r`$pwd:`r$pwd"
   
   echo "`n`r==========[ Tools ]==========`r"
   
   echo "`rMaven and Java version:"; & "d:\Maven\bin\mvn.cmd" --version
   echo "`rNode.js version:"; node -v
   echo "`rNPM version:"; & npm -v
   echo "`rWebpack version:"; & webpack -v
   
   echo "`n`r==========[ Variables ]==========`r"
   
   dir env:
  errorActionPreference: silentlyContinue
  displayName: 'Pipeline Summary'


- powershell: |
   set-location $env:Build_SourcesDirectory
   if ( test-path '.\artifacts' ) {​​​​​ del .\artifacts -rec -verbose; [void] ( md .\artifacts\artifacts )  }​​​​​ else {​​​​​ [void] ( md .\artifacts\artifacts ) }​​​​​
  displayName: 'Clean Artifact Folder'


- powershell: |
   set-location $env:Build_SourcesDirectory\deployment
   $env:JAVA_HOME = "d:\Zulu-8"
   & "d:\Maven\bin\mvn.cmd" -T 1.5C clean package -DskipTests
  displayName: 'Maven Clean Package Depoloyment Lambda'


- powershell: |
   set-location $env:Build_SourcesDirectory\lambda
   $env:JAVA_HOME = "d:\Zulu-8"
   & "d:\Maven\bin\mvn.cmd" -T 1.5C clean package -DskipTests
  displayName: 'Maven Clean Package Lambda'


- powershell: |
   set-location $env:Build_SourcesDirectory\module\permissions_java
   $env:JAVA_HOME = "d:\Zulu-8"
   & "d:\Maven\bin\mvn.cmd" -T 1.5C clean package -DskipTests
  displayName: 'Maven Clean Install Module'


- task: JFrog.jfrog-artifactory-vsts-extension.artifactory-npm.ArtifactoryNpm@2
  displayName: 'Artifactory NPM Install - root'
  inputs:
    artifactoryService: Artifactory
    sourceRepo: 'OT_seller_digital_npm'
    arguments: '--prefer-offline --no-audit'


- task: JFrog.jfrog-artifactory-vsts-extension.artifactory-npm.ArtifactoryNpm@2
  displayName: 'Artifactory NPM Install - ui'
  inputs:
    artifactoryService: Artifactory
    sourceRepo: 'OT_seller_digital_npm'
    workingFolder: ui
    arguments: '--prefer-offline --no-audit'


- task: JFrog.jfrog-artifactory-vsts-extension.artifactory-npm.ArtifactoryNpm@2
  displayName: 'Artifactory NPM Install - vue'
  inputs:
    artifactoryService: Artifactory
    sourceRepo: 'OT_seller_digital_npm'
    workingFolder: vue
    arguments: '--prefer-offline --no-audit'


- powershell: |
   set-location $env:Build_SourcesDirectory\vue
   webpack --config ./webpack.config.js -p
  displayName: 'Run Webpack'


- powershell: |
   set-location $env:Build_SourcesDirectory\ui
   copy .\config-mgmt-swagger-apigateway.json ..\artifacts\artifacts\config-mgmt-swagger-apigateway.json -verbose
  displayName: 'Copy Swagger to Artifacts'


- powershell: |
   set-location $env:Build_SourcesDirectory
   
   # copy lambda to artifacts folder
   copy .\lambda\target\bki-ot-cm-lambda-*.jar .\artifacts\artifacts -force -verbose
   
   # copy deployment lambda to artifacts folder
   copy .\deployment\target\bki-ot-cm-deployment-lambda-*.jar .\artifacts\artifacts -force -verbose


   # copy Terraform files to artifacts folder
   copy  .\*.tf* .\artifacts  -force -verbose
   
   # copy swagger to artifacts folder
   copy .\ui\config-mgmt-swagger.yaml .\artifacts\artifacts -force -verbose
   
   # copy index to artifacts folder
   copy .\vue\build\config-mgmt\config-mgmt.js .\ui\config-mgmt.js -force -verbose
   
   # zip ui
   compress-archive -path .\ui -DestinationPath .\artifacts\artifacts\ui.zip -CompressionLevel fastest -force -verbose
   
   #stage lambds_node zip.
   Compress-Archive -Path .\lambda_node -Update -DestinationPath .\artifacts\artifacts\lambda_node.zip
   
   # staging post deploy config files into build artifact
   move .\base_config .\artifacts\base_config -force -verbose
  displayName: 'Stage Build Files'


- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: artifacts
    ArtifactName: '$(Build.DefinitionName).$(Build.BuildId)'


# - powershell: |
#    <#
   
#    Retain Indefinitely
   
#    This script updates build 'keepForever' and 'retainedByRelease' to 'true'.
   
#    Azure DevOps 2019 Build REST API version 5.0 #
#    Builds - Update Build
#    https://docs.microsoft.com/en-us/rest/api/azure/devops/build/builds/update%20build?view=azure-devops-rest-5.0
   
#    Manual verification at this URL:
#    ${​​​​​tfsUrl}​​​​​/_build/results?buildId=83540
#    https://tfsenterprise.bkfs.com/tfs/Leveraged/OTCentral/_build/results?buildId=83540
   
#    #>
   
#    $collection = $env:System_TeamFoundationCollectionURI
#    $teamProject = $env:System_TeamProject
#    $tfsUrl = $collection + $teamProject
   
#    $pat = $env:PAT
   
#    if ( $env:Term_Program -eq 'vscode' -or $host.name -match 'ISE' )
#    {​​​​​
#        $tfsUrl = "https://tfsenterprise.bkfs.com/tfs/Leveraged/OTCentral"
#        $env:Build_BuildId = 83540
   
#        # LpsVcs\enumber
#        #$pat = "coa47slcowayauqdsgqtms7326d3dmk7pnvtnt6aynxlzqhxveoa" # Created on 2020-11-03. All scopes. Expires in 1 year on 2021-11-03.
   
#        # LpsVcs\serivce account
#        $pat = "qivpike3rtpquxpkhq2obdn4qza2iqld7lqf3cymsqeu76prb6pq" # Created on 2020-11-03. All scopes. Expires in 1 year on 2021-11-03.
#    }​​​​​
   
#    # Personal access token requires selected scopes Build (read) and Work items (full).
#    $base64AuthInfo = [convert]::ToBase64String([text.encoding]::ASCII.GetBytes(("{​​​​​0}​​​​​:{​​​​​1}​​​​​" -f "", $pat)))
#    $headers = @{​​​​​authorization = ("basic {​​​​​0}​​​​​" -f $base64AuthInfo)}​​​​​
   
#    function Enable-RetainIndefinitely ($buildId)
#    {​​​​​
#        $uri = "${​​​​​tfsUrl}​​​​​/_apis/build/builds/${​​​​​buildId}​​​​​?api-version=5.0"
   
#        $retentionPolicy = @{​​​​​
#            keepForever = 'true'
#            retainedByRelease = 'true' 
#        }​​​​​
   
#        $jsonBody = $retentionPolicy | ConvertTo-Json
   
#        #$result = irm -UseDefaultCredentials -method patch -uri $uri -body $jsonBody -ContentType "application/json"
#        $result = irm -method patch -uri $uri -body $jsonBody -ContentType "application/json" -headers $headers
#        $resultKeepForever = $result.keepForever.ToString()
#        $resultRetainedByRelease = $result.retainedByRelease.ToString()
   
#        return "`tBuild '$buildId' keepForever '$resultKeepForever' and retainedByRelease '$resultRetainedByRelease'.`r`n"
#    }​​​​​
   
#    echo "`n`r`t==========[ $env:Build_DefinitionName : $env:System_PhaseDisplayName : $env:System_PhaseName : $env:System_TaskDisplayName ]==========`r`n"
#    Enable-RetainIndefinitely $env:Build_BuildId
#    errorActionPreference: silentlyContinue
#    ignoreLASTEXITCODE: true
#   displayName: 'Retain Indefinitely'


















​[Yesterday 6:59 PM] Guntuku, Anil Kumar
    ?
